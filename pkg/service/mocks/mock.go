// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	todoListPrjct "github.com/kazakovichna/todoListPrjct"
	service "github.com/kazakovichna/todoListPrjct/pkg/service"
	reflect "reflect"
)

// MockAuthorization is a mock of Authorization interface
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockAuthorization) CreateUser(user todoListPrjct.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// CreateSession mocks base method
func (m *MockAuthorization) CreateSession(username, password string) (service.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", username, password)
	ret0, _ := ret[0].(service.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockAuthorizationMockRecorder) CreateSession(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthorization)(nil).CreateSession), username, password)
}

// RefreshTokenServices mocks base method
func (m *MockAuthorization) RefreshTokenServices(refreshToken string) (service.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenServices", refreshToken)
	ret0, _ := ret[0].(service.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokenServices indicates an expected call of RefreshTokenServices
func (mr *MockAuthorizationMockRecorder) RefreshTokenServices(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenServices", reflect.TypeOf((*MockAuthorization)(nil).RefreshTokenServices), refreshToken)
}

// MockTodoDesk is a mock of TodoDesk interface
type MockTodoDesk struct {
	ctrl     *gomock.Controller
	recorder *MockTodoDeskMockRecorder
}

// MockTodoDeskMockRecorder is the mock recorder for MockTodoDesk
type MockTodoDeskMockRecorder struct {
	mock *MockTodoDesk
}

// NewMockTodoDesk creates a new mock instance
func NewMockTodoDesk(ctrl *gomock.Controller) *MockTodoDesk {
	mock := &MockTodoDesk{ctrl: ctrl}
	mock.recorder = &MockTodoDeskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoDesk) EXPECT() *MockTodoDeskMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTodoDesk) Create(userId int, desk todoListPrjct.DeskTable) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, desk)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTodoDeskMockRecorder) Create(userId, desk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoDesk)(nil).Create), userId, desk)
}

// GetAll mocks base method
func (m *MockTodoDesk) GetAll(userId int) ([]todoListPrjct.DeskTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId)
	ret0, _ := ret[0].([]todoListPrjct.DeskTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockTodoDeskMockRecorder) GetAll(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoDesk)(nil).GetAll), userId)
}

// GetDeskById mocks base method
func (m *MockTodoDesk) GetDeskById(userId, id int) (todoListPrjct.DeskTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeskById", userId, id)
	ret0, _ := ret[0].(todoListPrjct.DeskTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeskById indicates an expected call of GetDeskById
func (mr *MockTodoDeskMockRecorder) GetDeskById(userId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeskById", reflect.TypeOf((*MockTodoDesk)(nil).GetDeskById), userId, id)
}

// Delete mocks base method
func (m *MockTodoDesk) Delete(userId, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTodoDeskMockRecorder) Delete(userId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoDesk)(nil).Delete), userId, id)
}

// Update mocks base method
func (m *MockTodoDesk) Update(userId, deskId int, input todoListPrjct.UpdateDeskInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, deskId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTodoDeskMockRecorder) Update(userId, deskId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoDesk)(nil).Update), userId, deskId, input)
}

// MockTodoList is a mock of TodoList interface
type MockTodoList struct {
	ctrl     *gomock.Controller
	recorder *MockTodoListMockRecorder
}

// MockTodoListMockRecorder is the mock recorder for MockTodoList
type MockTodoListMockRecorder struct {
	mock *MockTodoList
}

// NewMockTodoList creates a new mock instance
func NewMockTodoList(ctrl *gomock.Controller) *MockTodoList {
	mock := &MockTodoList{ctrl: ctrl}
	mock.recorder = &MockTodoListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoList) EXPECT() *MockTodoListMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTodoList) Create(userId, deskId int, list todoListPrjct.ListTable) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, deskId, list)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTodoListMockRecorder) Create(userId, deskId, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoList)(nil).Create), userId, deskId, list)
}

// GetAll mocks base method
func (m *MockTodoList) GetAll(userId, deskId int) ([]todoListPrjct.ListTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId, deskId)
	ret0, _ := ret[0].([]todoListPrjct.ListTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockTodoListMockRecorder) GetAll(userId, deskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoList)(nil).GetAll), userId, deskId)
}

// GetById mocks base method
func (m *MockTodoList) GetById(userId, deskId, listId int) (todoListPrjct.ListTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, deskId, listId)
	ret0, _ := ret[0].(todoListPrjct.ListTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockTodoListMockRecorder) GetById(userId, deskId, listId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTodoList)(nil).GetById), userId, deskId, listId)
}

// Delete mocks base method
func (m *MockTodoList) Delete(userId, deskId, listId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, deskId, listId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTodoListMockRecorder) Delete(userId, deskId, listId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoList)(nil).Delete), userId, deskId, listId)
}

// Update mocks base method
func (m *MockTodoList) Update(userId, deskId, listId int, input todoListPrjct.UpdateListInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, deskId, listId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTodoListMockRecorder) Update(userId, deskId, listId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoList)(nil).Update), userId, deskId, listId, input)
}

// MockTodoItem is a mock of TodoItem interface
type MockTodoItem struct {
	ctrl     *gomock.Controller
	recorder *MockTodoItemMockRecorder
}

// MockTodoItemMockRecorder is the mock recorder for MockTodoItem
type MockTodoItemMockRecorder struct {
	mock *MockTodoItem
}

// NewMockTodoItem creates a new mock instance
func NewMockTodoItem(ctrl *gomock.Controller) *MockTodoItem {
	mock := &MockTodoItem{ctrl: ctrl}
	mock.recorder = &MockTodoItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoItem) EXPECT() *MockTodoItemMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTodoItem) Create(listId int, input todoListPrjct.ItemTable) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", listId, input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTodoItemMockRecorder) Create(listId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoItem)(nil).Create), listId, input)
}

// GetAllItems mocks base method
func (m *MockTodoItem) GetAllItems(userId, deskId, listId int) ([]todoListPrjct.ItemTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItems", userId, deskId, listId)
	ret0, _ := ret[0].([]todoListPrjct.ItemTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItems indicates an expected call of GetAllItems
func (mr *MockTodoItemMockRecorder) GetAllItems(userId, deskId, listId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItems", reflect.TypeOf((*MockTodoItem)(nil).GetAllItems), userId, deskId, listId)
}

// GetItemById mocks base method
func (m *MockTodoItem) GetItemById(userId, itemId int) (todoListPrjct.ItemTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", userId, itemId)
	ret0, _ := ret[0].(todoListPrjct.ItemTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemById indicates an expected call of GetItemById
func (mr *MockTodoItemMockRecorder) GetItemById(userId, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockTodoItem)(nil).GetItemById), userId, itemId)
}

// UpdateItem mocks base method
func (m *MockTodoItem) UpdateItem(userId, itemId int, input todoListPrjct.UpdateItemInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", userId, itemId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem
func (mr *MockTodoItemMockRecorder) UpdateItem(userId, itemId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockTodoItem)(nil).UpdateItem), userId, itemId, input)
}

// DeleteItem mocks base method
func (m *MockTodoItem) DeleteItem(userId, itemId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", userId, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem
func (mr *MockTodoItemMockRecorder) DeleteItem(userId, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockTodoItem)(nil).DeleteItem), userId, itemId)
}
